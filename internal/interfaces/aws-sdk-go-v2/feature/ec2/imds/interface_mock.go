// Code generated by mockery v2.46.0. DO NOT EDIT.

package imds

import (
	context "context"

	ec2imds "github.com/aws/aws-sdk-go-v2/feature/ec2/imds"
	mock "github.com/stretchr/testify/mock"
)

// MockImdsClient is an autogenerated mock type for the ImdsClient type
type MockImdsClient struct {
	mock.Mock
}

type MockImdsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImdsClient) EXPECT() *MockImdsClient_Expecter {
	return &MockImdsClient_Expecter{mock: &_m.Mock}
}

// GetDynamicData provides a mock function with given fields: ctx, params, optFns
func (_m *MockImdsClient) GetDynamicData(ctx context.Context, params *ec2imds.GetDynamicDataInput, optFns ...func(*ec2imds.Options)) (*ec2imds.GetDynamicDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDynamicData")
	}

	var r0 *ec2imds.GetDynamicDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2imds.GetDynamicDataInput, ...func(*ec2imds.Options)) (*ec2imds.GetDynamicDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ec2imds.GetDynamicDataInput, ...func(*ec2imds.Options)) *ec2imds.GetDynamicDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2imds.GetDynamicDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ec2imds.GetDynamicDataInput, ...func(*ec2imds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImdsClient_GetDynamicData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDynamicData'
type MockImdsClient_GetDynamicData_Call struct {
	*mock.Call
}

// GetDynamicData is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ec2imds.GetDynamicDataInput
//   - optFns ...func(*ec2imds.Options)
func (_e *MockImdsClient_Expecter) GetDynamicData(ctx interface{}, params interface{}, optFns ...interface{}) *MockImdsClient_GetDynamicData_Call {
	return &MockImdsClient_GetDynamicData_Call{Call: _e.mock.On("GetDynamicData",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockImdsClient_GetDynamicData_Call) Run(run func(ctx context.Context, params *ec2imds.GetDynamicDataInput, optFns ...func(*ec2imds.Options))) *MockImdsClient_GetDynamicData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ec2imds.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ec2imds.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ec2imds.GetDynamicDataInput), variadicArgs...)
	})
	return _c
}

func (_c *MockImdsClient_GetDynamicData_Call) Return(_a0 *ec2imds.GetDynamicDataOutput, _a1 error) *MockImdsClient_GetDynamicData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImdsClient_GetDynamicData_Call) RunAndReturn(run func(context.Context, *ec2imds.GetDynamicDataInput, ...func(*ec2imds.Options)) (*ec2imds.GetDynamicDataOutput, error)) *MockImdsClient_GetDynamicData_Call {
	_c.Call.Return(run)
	return _c
}

// GetIAMInfo provides a mock function with given fields: ctx, params, optFns
func (_m *MockImdsClient) GetIAMInfo(ctx context.Context, params *ec2imds.GetIAMInfoInput, optFns ...func(*ec2imds.Options)) (*ec2imds.GetIAMInfoOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIAMInfo")
	}

	var r0 *ec2imds.GetIAMInfoOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2imds.GetIAMInfoInput, ...func(*ec2imds.Options)) (*ec2imds.GetIAMInfoOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ec2imds.GetIAMInfoInput, ...func(*ec2imds.Options)) *ec2imds.GetIAMInfoOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2imds.GetIAMInfoOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ec2imds.GetIAMInfoInput, ...func(*ec2imds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImdsClient_GetIAMInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIAMInfo'
type MockImdsClient_GetIAMInfo_Call struct {
	*mock.Call
}

// GetIAMInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ec2imds.GetIAMInfoInput
//   - optFns ...func(*ec2imds.Options)
func (_e *MockImdsClient_Expecter) GetIAMInfo(ctx interface{}, params interface{}, optFns ...interface{}) *MockImdsClient_GetIAMInfo_Call {
	return &MockImdsClient_GetIAMInfo_Call{Call: _e.mock.On("GetIAMInfo",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockImdsClient_GetIAMInfo_Call) Run(run func(ctx context.Context, params *ec2imds.GetIAMInfoInput, optFns ...func(*ec2imds.Options))) *MockImdsClient_GetIAMInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ec2imds.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ec2imds.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ec2imds.GetIAMInfoInput), variadicArgs...)
	})
	return _c
}

func (_c *MockImdsClient_GetIAMInfo_Call) Return(_a0 *ec2imds.GetIAMInfoOutput, _a1 error) *MockImdsClient_GetIAMInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImdsClient_GetIAMInfo_Call) RunAndReturn(run func(context.Context, *ec2imds.GetIAMInfoInput, ...func(*ec2imds.Options)) (*ec2imds.GetIAMInfoOutput, error)) *MockImdsClient_GetIAMInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstanceIdentityDocument provides a mock function with given fields: ctx, params, optFns
func (_m *MockImdsClient) GetInstanceIdentityDocument(ctx context.Context, params *ec2imds.GetInstanceIdentityDocumentInput, optFns ...func(*ec2imds.Options)) (*ec2imds.GetInstanceIdentityDocumentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceIdentityDocument")
	}

	var r0 *ec2imds.GetInstanceIdentityDocumentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2imds.GetInstanceIdentityDocumentInput, ...func(*ec2imds.Options)) (*ec2imds.GetInstanceIdentityDocumentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ec2imds.GetInstanceIdentityDocumentInput, ...func(*ec2imds.Options)) *ec2imds.GetInstanceIdentityDocumentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2imds.GetInstanceIdentityDocumentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ec2imds.GetInstanceIdentityDocumentInput, ...func(*ec2imds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImdsClient_GetInstanceIdentityDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstanceIdentityDocument'
type MockImdsClient_GetInstanceIdentityDocument_Call struct {
	*mock.Call
}

// GetInstanceIdentityDocument is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ec2imds.GetInstanceIdentityDocumentInput
//   - optFns ...func(*ec2imds.Options)
func (_e *MockImdsClient_Expecter) GetInstanceIdentityDocument(ctx interface{}, params interface{}, optFns ...interface{}) *MockImdsClient_GetInstanceIdentityDocument_Call {
	return &MockImdsClient_GetInstanceIdentityDocument_Call{Call: _e.mock.On("GetInstanceIdentityDocument",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockImdsClient_GetInstanceIdentityDocument_Call) Run(run func(ctx context.Context, params *ec2imds.GetInstanceIdentityDocumentInput, optFns ...func(*ec2imds.Options))) *MockImdsClient_GetInstanceIdentityDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ec2imds.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ec2imds.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ec2imds.GetInstanceIdentityDocumentInput), variadicArgs...)
	})
	return _c
}

func (_c *MockImdsClient_GetInstanceIdentityDocument_Call) Return(_a0 *ec2imds.GetInstanceIdentityDocumentOutput, _a1 error) *MockImdsClient_GetInstanceIdentityDocument_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImdsClient_GetInstanceIdentityDocument_Call) RunAndReturn(run func(context.Context, *ec2imds.GetInstanceIdentityDocumentInput, ...func(*ec2imds.Options)) (*ec2imds.GetInstanceIdentityDocumentOutput, error)) *MockImdsClient_GetInstanceIdentityDocument_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *MockImdsClient) GetMetadata(ctx context.Context, params *ec2imds.GetMetadataInput, optFns ...func(*ec2imds.Options)) (*ec2imds.GetMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 *ec2imds.GetMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2imds.GetMetadataInput, ...func(*ec2imds.Options)) (*ec2imds.GetMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ec2imds.GetMetadataInput, ...func(*ec2imds.Options)) *ec2imds.GetMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2imds.GetMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ec2imds.GetMetadataInput, ...func(*ec2imds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImdsClient_GetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadata'
type MockImdsClient_GetMetadata_Call struct {
	*mock.Call
}

// GetMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ec2imds.GetMetadataInput
//   - optFns ...func(*ec2imds.Options)
func (_e *MockImdsClient_Expecter) GetMetadata(ctx interface{}, params interface{}, optFns ...interface{}) *MockImdsClient_GetMetadata_Call {
	return &MockImdsClient_GetMetadata_Call{Call: _e.mock.On("GetMetadata",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockImdsClient_GetMetadata_Call) Run(run func(ctx context.Context, params *ec2imds.GetMetadataInput, optFns ...func(*ec2imds.Options))) *MockImdsClient_GetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ec2imds.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ec2imds.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ec2imds.GetMetadataInput), variadicArgs...)
	})
	return _c
}

func (_c *MockImdsClient_GetMetadata_Call) Return(_a0 *ec2imds.GetMetadataOutput, _a1 error) *MockImdsClient_GetMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImdsClient_GetMetadata_Call) RunAndReturn(run func(context.Context, *ec2imds.GetMetadataInput, ...func(*ec2imds.Options)) (*ec2imds.GetMetadataOutput, error)) *MockImdsClient_GetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegion provides a mock function with given fields: ctx, params, optFns
func (_m *MockImdsClient) GetRegion(ctx context.Context, params *ec2imds.GetRegionInput, optFns ...func(*ec2imds.Options)) (*ec2imds.GetRegionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRegion")
	}

	var r0 *ec2imds.GetRegionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2imds.GetRegionInput, ...func(*ec2imds.Options)) (*ec2imds.GetRegionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ec2imds.GetRegionInput, ...func(*ec2imds.Options)) *ec2imds.GetRegionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2imds.GetRegionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ec2imds.GetRegionInput, ...func(*ec2imds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImdsClient_GetRegion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegion'
type MockImdsClient_GetRegion_Call struct {
	*mock.Call
}

// GetRegion is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ec2imds.GetRegionInput
//   - optFns ...func(*ec2imds.Options)
func (_e *MockImdsClient_Expecter) GetRegion(ctx interface{}, params interface{}, optFns ...interface{}) *MockImdsClient_GetRegion_Call {
	return &MockImdsClient_GetRegion_Call{Call: _e.mock.On("GetRegion",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockImdsClient_GetRegion_Call) Run(run func(ctx context.Context, params *ec2imds.GetRegionInput, optFns ...func(*ec2imds.Options))) *MockImdsClient_GetRegion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ec2imds.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ec2imds.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ec2imds.GetRegionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockImdsClient_GetRegion_Call) Return(_a0 *ec2imds.GetRegionOutput, _a1 error) *MockImdsClient_GetRegion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImdsClient_GetRegion_Call) RunAndReturn(run func(context.Context, *ec2imds.GetRegionInput, ...func(*ec2imds.Options)) (*ec2imds.GetRegionOutput, error)) *MockImdsClient_GetRegion_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserData provides a mock function with given fields: ctx, params, optFns
func (_m *MockImdsClient) GetUserData(ctx context.Context, params *ec2imds.GetUserDataInput, optFns ...func(*ec2imds.Options)) (*ec2imds.GetUserDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserData")
	}

	var r0 *ec2imds.GetUserDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2imds.GetUserDataInput, ...func(*ec2imds.Options)) (*ec2imds.GetUserDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ec2imds.GetUserDataInput, ...func(*ec2imds.Options)) *ec2imds.GetUserDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2imds.GetUserDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ec2imds.GetUserDataInput, ...func(*ec2imds.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImdsClient_GetUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserData'
type MockImdsClient_GetUserData_Call struct {
	*mock.Call
}

// GetUserData is a helper method to define mock.On call
//   - ctx context.Context
//   - params *ec2imds.GetUserDataInput
//   - optFns ...func(*ec2imds.Options)
func (_e *MockImdsClient_Expecter) GetUserData(ctx interface{}, params interface{}, optFns ...interface{}) *MockImdsClient_GetUserData_Call {
	return &MockImdsClient_GetUserData_Call{Call: _e.mock.On("GetUserData",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockImdsClient_GetUserData_Call) Run(run func(ctx context.Context, params *ec2imds.GetUserDataInput, optFns ...func(*ec2imds.Options))) *MockImdsClient_GetUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ec2imds.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ec2imds.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ec2imds.GetUserDataInput), variadicArgs...)
	})
	return _c
}

func (_c *MockImdsClient_GetUserData_Call) Return(_a0 *ec2imds.GetUserDataOutput, _a1 error) *MockImdsClient_GetUserData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImdsClient_GetUserData_Call) RunAndReturn(run func(context.Context, *ec2imds.GetUserDataInput, ...func(*ec2imds.Options)) (*ec2imds.GetUserDataOutput, error)) *MockImdsClient_GetUserData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImdsClient creates a new instance of MockImdsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImdsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImdsClient {
	mock := &MockImdsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
